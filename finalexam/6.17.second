import javax.sound.sampled.*;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class musicplayer extends JFrame {
    private JButton playPauseButton, stopButton, nextButton, prevButton, shuffleButton, repeatButton, likeButton, dislikeButton, volumeButton;
    private JLabel statusLabel, coverLabel, shuffleStatusLabel, repeatStatusLabel;
    private JSlider volumeSlider, progressSlider;
    private JFileChooser fileChooser;
    private File selectedFile;
    private List<File> playlist;
    private Clip audioClip;
    private boolean isPlaying = false;
    private boolean isPaused = false;
    private boolean isAdjustingProgress = false;
    private boolean isShuffle = false;
    private boolean isRepeat = false;
    private long clipTimePosition = 0;
    private FloatControl volumeControl;
    private Timer timer;
    private int currentIndex = 0;

    // 아이콘 파일 경로
    private final String playIconPath = "image/play.jpg";
    private final String pauseIconPath = "image/pause.jpg";
    private final String stopIconPath = "image/stop.jpg";
    private final String nextIconPath = "image/next.jpg";
    private final String prevIconPath = "image/prev.jpg";
    private final String shuffleIconPath = "image/shuffle.jpg";
    private final String repeatIconPath = "image/repeat.jpg";
    private final String likeIconPath = "image/like.jpg";
    private final String dislikeIconPath = "image/dislike.jpg";
    private final String likePressedIconPath = "image/like_pressed.jpg";
    private final String dislikePressedIconPath = "image/dislike_pressed.jpg";
    private final String soundIconPath = "image/sound.jpg";
    private final String soundLowIconPath = "image/sound_low.jpg";
    private final String soundHighIconPath = "image/sound_high.jpg";
    private final String soundZeroIconPath = "image/sound_zero.jpg";

    public musicplayer() {
        setTitle("Music Player");
        setSize(1200, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Create Menu Bar
        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("File");
        JMenuItem openMenuItem = new JMenuItem("Open File");
        JMenuItem openFolderMenuItem = new JMenuItem("Open Folder");
        fileMenu.add(openMenuItem);
        fileMenu.add(openFolderMenuItem);
        menuBar.add(fileMenu);
        setJMenuBar(menuBar);

        // Load icons for buttons
        ImageIcon playIcon = new ImageIcon(playIconPath);
        ImageIcon pauseIcon = new ImageIcon(pauseIconPath);
        ImageIcon stopIcon = new ImageIcon(stopIconPath);
        ImageIcon nextIcon = new ImageIcon(nextIconPath);
        ImageIcon prevIcon = new ImageIcon(prevIconPath);
        ImageIcon shuffleIcon = new ImageIcon(shuffleIconPath);
        ImageIcon repeatIcon = new ImageIcon(repeatIconPath);
        ImageIcon likeIcon = new ImageIcon(likeIconPath);
        ImageIcon dislikeIcon = new ImageIcon(dislikeIconPath);
        ImageIcon likePressedIcon = new ImageIcon(likePressedIconPath);
        ImageIcon dislikePressedIcon = new ImageIcon(dislikePressedIconPath);
        ImageIcon soundIcon = new ImageIcon(soundIconPath);
        ImageIcon soundLowIcon = new ImageIcon(soundLowIconPath);
        ImageIcon soundHighIcon = new ImageIcon(soundHighIconPath);
        ImageIcon soundZeroIcon = new ImageIcon(soundZeroIconPath);

        // Initialize buttons
        playPauseButton = new JButton(playIcon);
        stopButton = new JButton(stopIcon);
        nextButton = new JButton(nextIcon);
        prevButton = new JButton(prevIcon);
        shuffleButton = new JButton(shuffleIcon);
        repeatButton = new JButton(repeatIcon);
        likeButton = new JButton(likeIcon);
        dislikeButton = new JButton(dislikeIcon);
        volumeButton = new JButton(soundIcon);

        statusLabel = new JLabel("No file selected");
        coverLabel = new JLabel();
        coverLabel.setPreferredSize(new Dimension(300, 300));

        shuffleStatusLabel = new JLabel("Shuffle: Off");
        repeatStatusLabel = new JLabel("Repeat: Off");

        fileChooser = new JFileChooser();

        volumeSlider = new JSlider(JSlider.HORIZONTAL, 0, 100, 50);
        volumeSlider.setMajorTickSpacing(10);
        volumeSlider.setPaintTicks(true);
        volumeSlider.setPaintLabels(true);
        volumeSlider.setVisible(false);
        volumeSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (volumeControl != null) {
                    float volume = volumeSlider.getValue() / 100.0f;
                    volumeControl.setValue(volumeControl.getMinimum() + (volumeControl.getMaximum() - volumeControl.getMinimum()) * volume);
                    if (volumeSlider.getValue() == 0) {
                        volumeButton.setIcon(soundZeroIcon);
                    } else if (volumeSlider.getValue() < 50) {
                        volumeButton.setIcon(soundLowIcon);
                    } else {
                        volumeButton.setIcon(soundHighIcon);
                    }
                }
            }
        });

        progressSlider = new JSlider(JSlider.HORIZONTAL, 0, 100, 0);
        progressSlider.setMajorTickSpacing(10);
        progressSlider.setPaintTicks(true);
        progressSlider.setPaintLabels(true);
        progressSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (audioClip != null && !isAdjustingProgress) {
                    if (isPlaying || isPaused) {
                        int progress = progressSlider.getValue();
                        long newPosition = (long) (audioClip.getMicrosecondLength() * (progress / 100.0));
                        audioClip.setMicrosecondPosition(newPosition);
                        if (isPlaying) {
                            clipTimePosition = newPosition;
                            audioClip.start();
                        }
                    }
                }
            }
        });

        JPanel controlsPanel = new JPanel();
        controlsPanel.setLayout(new FlowLayout());

        controlsPanel.add(prevButton);
        controlsPanel.add(playPauseButton);
        controlsPanel.add(stopButton);
        controlsPanel.add(nextButton);

        JPanel optionsPanel = new JPanel();
        optionsPanel.setLayout(new FlowLayout());

        optionsPanel.add(shuffleButton);
        optionsPanel.add(repeatButton);
        optionsPanel.add(volumeButton);
        optionsPanel.add(volumeSlider);
        optionsPanel.add(progressSlider);

        JPanel likeDislikePanel = new JPanel();
        likeDislikePanel.setLayout(new FlowLayout());

        likeDislikePanel.add(likeButton);
        likeDislikePanel.add(dislikeButton);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.add(coverLabel, BorderLayout.NORTH);
        mainPanel.add(statusLabel, BorderLayout.CENTER);
        mainPanel.add(controlsPanel, BorderLayout.SOUTH);
        mainPanel.add(optionsPanel, BorderLayout.WEST);
        mainPanel.add(likeDislikePanel, BorderLayout.EAST);

        add(mainPanel, BorderLayout.CENTER);
        add(shuffleStatusLabel, BorderLayout.NORTH);
        add(repeatStatusLabel, BorderLayout.SOUTH);

        playPauseButton.addActionListener(new PlayPauseAction());
        stopButton.addActionListener(new StopAction());
        nextButton.addActionListener(new NextAction());
        prevButton.addActionListener(new PrevAction());
        shuffleButton.addActionListener(new ShuffleAction());
        repeatButton.addActionListener(new RepeatAction());
        likeButton.addActionListener(new LikeAction());
        dislikeButton.addActionListener(new DislikeAction());
        openMenuItem.addActionListener(new OpenFileAction());
        openFolderMenuItem.addActionListener(new OpenFolderAction());
        volumeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                volumeSlider.setVisible(!volumeSlider.isVisible());
            }
        });

        timer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (audioClip != null && isPlaying) {
                    isAdjustingProgress = true;
                    int progress = (int) ((audioClip.getMicrosecondPosition() / (double) audioClip.getMicrosecondLength()) * 100);
                    progressSlider.setValue(progress);
                    isAdjustingProgress = false;
                }
            }
        });
        timer.start();

        playlist = new ArrayList<>();

        setVisible(true);
    }

    private class PlayPauseAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (selectedFile != null) {
                if (isPlaying) {
                    clipTimePosition = audioClip.getMicrosecondPosition();
                    audioClip.stop();
                    isPlaying = false;
                    isPaused = true;
                    playPauseButton.setIcon(new ImageIcon(playIconPath));
                } else if (isPaused) {
                    audioClip.setMicrosecondPosition(clipTimePosition);
                    audioClip.start();
                    isPlaying = true;
                    isPaused = false;
                    playPauseButton.setIcon(new ImageIcon(pauseIconPath));
                } else {
                    playFile(selectedFile);
                    playPauseButton.setIcon(new ImageIcon(pauseIconPath));
                }
            }
        }
    }

    private class StopAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (audioClip != null) {
                audioClip.stop();
                audioClip.close();
                isPlaying = false;
                isPaused = false;
                clipTimePosition = 0;
                progressSlider.setValue(0);
                playPauseButton.setIcon(new ImageIcon(playIconPath));
                statusLabel.setText("Stopped: " + selectedFile.getName());
            }
        }
    }

    private class NextAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            nextTrack();
        }
    }

    private class PrevAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            prevTrack();
        }
    }

    private class ShuffleAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            isShuffle = !isShuffle;
            shuffleButton.setIcon(new ImageIcon(isShuffle ? shuffleIconPath.replace(".jpg", "_on.jpg") : shuffleIconPath));
            shuffleStatusLabel.setText("Shuffle: " + (isShuffle ? "On" : "Off"));
        }
    }

    private class RepeatAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            isRepeat = !isRepeat;
            repeatButton.setIcon(new ImageIcon(isRepeat ? repeatIconPath.replace(".jpg", "_on.jpg") : repeatIconPath));
            repeatStatusLabel.setText("Repeat: " + (isRepeat ? "On" : "Off"));
        }
    }

    private class LikeAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (likeButton.getIcon().toString().equals(likeIconPath)) {
                statusLabel.setText("Liked: " + selectedFile.getName());
                likeButton.setIcon(new ImageIcon(likePressedIconPath));
                dislikeButton.setIcon(new ImageIcon(dislikeIconPath));
            } else {
                statusLabel.setText("Unliked: " + selectedFile.getName());
                likeButton.setIcon(new ImageIcon(likeIconPath));
            }
        }
    }

    private class DislikeAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (dislikeButton.getIcon().toString().equals(dislikeIconPath)) {
                statusLabel.setText("Disliked: " + selectedFile.getName());
                dislikeButton.setIcon(new ImageIcon(dislikePressedIconPath));
                likeButton.setIcon(new ImageIcon(likeIconPath));
            } else {
                statusLabel.setText("Undisliked: " + selectedFile.getName());
                dislikeButton.setIcon(new ImageIcon(dislikeIconPath));
            }
        }
    }

    private class OpenFileAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            int returnValue = fileChooser.showOpenDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                selectedFile = fileChooser.getSelectedFile();
                statusLabel.setText("Selected: " + selectedFile.getName());
                if (isPlaying || isPaused) {
                    audioClip.stop();
                    audioClip.close();
                    isPlaying = false;
                    isPaused = false;
                    clipTimePosition = 0;
                    progressSlider.setValue(0);
                }
                playlist.clear();
                playlist.add(selectedFile);
                currentIndex = 0;
                displayCover(selectedFile);
            }
        }
    }

    private class OpenFolderAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnValue = fileChooser.showOpenDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File folder = fileChooser.getSelectedFile();
                File[] files = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".wav"));
                if (files != null) {
                    playlist.clear();
                    Collections.addAll(playlist, files);
                    if (isShuffle) {
                        Collections.shuffle(playlist);
                    }
                    if (!playlist.isEmpty()) {
                        currentIndex = 0;
                        selectedFile = playlist.get(currentIndex);
                        statusLabel.setText("Selected: " + selectedFile.getName());
                        displayCover(selectedFile);
                    }
                }
            }
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        }
    }

    private void playFile(File file) {
        try {
            AudioInputStream audioStream = AudioSystem.getAudioInputStream(file);
            audioClip = AudioSystem.getClip();
            audioClip.open(audioStream);
            volumeControl = (FloatControl) audioClip.getControl(FloatControl.Type.MASTER_GAIN);
            float volume = volumeSlider.getValue() / 100.0f;
            volumeControl.setValue(volumeControl.getMinimum() + (volumeControl.getMaximum() - volumeControl.getMinimum()) * volume);
            audioClip.start();
            isPlaying = true;
            statusLabel.setText("Playing: " + file.getName());
            audioClip.addLineListener(event -> {
                if (event.getType() == LineEvent.Type.STOP && !isPaused) {
                    if (isRepeat) {
                        playFile(file);
                    } else {
                        nextTrack();
                    }
                }
            });
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
            ex.printStackTrace();
            statusLabel.setText("Error playing file.");
        }
    }

    private void nextTrack() {
        if (playlist.isEmpty()) {
            return;
        }
        currentIndex = (currentIndex + 1) % playlist.size();
        selectedFile = playlist.get(currentIndex);
        if (audioClip != null) {
            audioClip.stop();
            audioClip.close();
        }
        playFile(selectedFile);
        resetLikeDislikeButtons();
    }

    private void prevTrack() {
        if (playlist.isEmpty()) {
            return;
        }
        currentIndex = (currentIndex - 1 + playlist.size()) % playlist.size();
        selectedFile = playlist.get(currentIndex);
        if (audioClip != null) {
            audioClip.stop();
            audioClip.close();
        }
        playFile(selectedFile);
        resetLikeDislikeButtons();
    }

    private void resetLikeDislikeButtons() {
        likeButton.setIcon(new ImageIcon(likeIconPath));
        dislikeButton.setIcon(new ImageIcon(dislikeIconPath));
    }

    private void displayCover(File file) {
        // Assuming the cover image is in the same directory with the same name but with .jpg extension
        String coverPath = file.getAbsolutePath().replace(".wav", ".jpg");
        ImageIcon coverIcon = new ImageIcon(coverPath);
        if (coverIcon.getIconWidth() > 0) {
            coverLabel.setIcon(coverIcon);
        } else {
            coverLabel.setIcon(null);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(musicplayer::new);
    }
}
