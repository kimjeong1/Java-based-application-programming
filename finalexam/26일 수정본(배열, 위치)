import javax.sound.sampled.*;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class MusicPlayer extends JFrame {
    private JButton playPauseButton, nextButton, prevButton, shuffleButton, likeButton, dislikeButton, volumeButton, lyricsButton, playlistButton;
    private JLabel statusLabel, coverLabel, shuffleStatusLabel;
    private JSlider volumeSlider, progressSlider;
    private JFileChooser fileChooser;
    private File selectedFile;
    private List<File> playlist;
    private Clip audioClip;
    private boolean isPlaying = false;
    private boolean isPaused = false;
    private boolean isAdjustingProgress = false;
    private boolean isShuffle = false;
    private long clipTimePosition = 0;
    private FloatControl volumeControl;
    private Timer timer;
    private int currentIndex = 0;
    private boolean isLiked = false;
    private boolean isDisliked = false;

    // Icon file paths
    private final String playIconPath = "image/play.jpg";
    private final String pauseIconPath = "image/pause.jpg";
    private final String nextIconPath = "image/next.jpg";
    private final String prevIconPath = "image/prev.jpg";
    private final String shuffleIconPath = "image/shuffle.jpg";
    private final String likeIconPath = "image/like.jpg";
    private final String dislikeIconPath = "image/dislike.jpg";
    private final String likePressedIconPath = "image/like_pressed.jpg";
    private final String dislikePressedIconPath = "image/dislike_pressed.jpg";
    private final String soundIconPath = "image/sound.jpg";
    private final String soundLowIconPath = "image/sound_low.jpg";
    private final String soundHighIconPath = "image/sound_high.jpg";
    private final String soundZeroIconPath = "image/sound_zero.jpg";
    private final String lyricsIconPath = "image/lyrics.jpg";
    private final String playlistIconPath = "image/playlist.jpg";

    public MusicPlayer() {
        setTitle("Music Player");
        setSize(420, 750);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        getContentPane().setBackground(Color.LIGHT_GRAY);

        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("Open");
        JMenuItem openMenuItem = new JMenuItem("Open File");
        JMenuItem openFolderMenuItem = new JMenuItem("Open Folder");
        fileMenu.add(openMenuItem);
        fileMenu.add(openFolderMenuItem);
        menuBar.add(fileMenu);
        setJMenuBar(menuBar);

        ImageIcon playIcon = resizeIcon(new ImageIcon(playIconPath), 50, 50);
        ImageIcon pauseIcon = resizeIcon(new ImageIcon(pauseIconPath), 50, 50);
        ImageIcon nextIcon = resizeIcon(new ImageIcon(nextIconPath), 50, 50);
        ImageIcon prevIcon = resizeIcon(new ImageIcon(prevIconPath), 50, 50);
        ImageIcon shuffleIcon = resizeIcon(new ImageIcon(shuffleIconPath), 50, 50);
        ImageIcon likeIcon = resizeIcon(new ImageIcon(likeIconPath), 50, 50);
        ImageIcon dislikeIcon = resizeIcon(new ImageIcon(dislikeIconPath), 50, 50);
        ImageIcon likePressedIcon = resizeIcon(new ImageIcon(likePressedIconPath), 50, 50);
        ImageIcon dislikePressedIcon = resizeIcon(new ImageIcon(dislikePressedIconPath), 50, 50);
        ImageIcon soundIcon = resizeIcon(new ImageIcon(soundIconPath), 50, 50);
        ImageIcon soundLowIcon = resizeIcon(new ImageIcon(soundLowIconPath), 50, 50);
        ImageIcon soundHighIcon = resizeIcon(new ImageIcon(soundHighIconPath), 50, 50);
        ImageIcon soundZeroIcon = resizeIcon(new ImageIcon(soundZeroIconPath), 50, 50);
        ImageIcon lyricsIcon = resizeIcon(new ImageIcon(lyricsIconPath), 50, 50);
        ImageIcon playlistIcon = resizeIcon(new ImageIcon(playlistIconPath), 50, 50);

        Dimension buttonSize = new Dimension(60, 60);

        // Initialize buttons with transparency
        playPauseButton = new JButton(playIcon);
        playPauseButton.setPreferredSize(buttonSize);
        makeButtonTransparent(playPauseButton);

        nextButton = new JButton(nextIcon);
        nextButton.setPreferredSize(buttonSize);
        makeButtonTransparent(nextButton);

        prevButton = new JButton(prevIcon);
        prevButton.setPreferredSize(buttonSize);
        makeButtonTransparent(prevButton);

        shuffleButton = new JButton(shuffleIcon);
        shuffleButton.setPreferredSize(buttonSize);
        makeButtonTransparent(shuffleButton);

        likeButton = new JButton(likeIcon);
        likeButton.setPreferredSize(buttonSize);
        makeButtonTransparent(likeButton);

        dislikeButton = new JButton(dislikeIcon);
        dislikeButton.setPreferredSize(buttonSize);
        makeButtonTransparent(dislikeButton);

        volumeButton = new JButton(soundIcon);
        volumeButton.setPreferredSize(buttonSize);
        makeButtonTransparent(volumeButton);

        lyricsButton = new JButton(lyricsIcon);
        lyricsButton.setPreferredSize(buttonSize);
        makeButtonTransparent(lyricsButton);

        playlistButton = new JButton(playlistIcon);
        playlistButton.setPreferredSize(buttonSize);
        makeButtonTransparent(playlistButton);

        statusLabel = new JLabel("No file selected");
        statusLabel.setForeground(Color.WHITE);
        coverLabel = new JLabel();
        coverLabel.setPreferredSize(new Dimension(200, 200)); // Set the cover size as requested
        coverLabel.setHorizontalAlignment(JLabel.CENTER); // Center align cover image

        shuffleStatusLabel = new JLabel("Shuffle: Off");
        shuffleStatusLabel.setForeground(Color.WHITE);

        fileChooser = new JFileChooser();

        volumeSlider = new JSlider(JSlider.HORIZONTAL, 0, 100, 70);
        volumeSlider.setMajorTickSpacing(10);
        volumeSlider.setPaintTicks(true);
        volumeSlider.setPaintLabels(true);
        volumeSlider.setOpaque(false);
        volumeSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (volumeControl != null) {
                    float volume = volumeSlider.getValue() / 100.0f;
                    volumeControl.setValue(volumeControl.getMinimum() + (volumeControl.getMaximum() - volumeControl.getMinimum()) * volume);
                    if (volumeSlider.getValue() == 0) {
                        volumeButton.setIcon(soundZeroIcon);
                    } else if (volumeSlider.getValue() < 50) {
                        volumeButton.setIcon(soundLowIcon);
                    } else {
                        volumeButton.setIcon(soundHighIcon);
                    }
                }
            }
        });

        progressSlider = new JSlider(JSlider.HORIZONTAL, 0, 100, 0);
        progressSlider.setPaintTicks(false);
        progressSlider.setPaintLabels(false);
        progressSlider.setOpaque(false);
        progressSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (audioClip != null && !isAdjustingProgress) {
                    if (isPlaying || isPaused) {
                        int progress = progressSlider.getValue();
                        long newPosition = (long) (audioClip.getMicrosecondLength() * (progress / 100.0));
                        audioClip.setMicrosecondPosition(newPosition);
                        if (isPlaying) {
                            clipTimePosition = newPosition;
                            audioClip.start();
                        }
                    }
                }
                // 현재 재생 시간이 총 재생 시간에 도달했는지 확인
                if (audioClip != null && audioClip.getMicrosecondPosition() >= audioClip.getMicrosecondLength()) {
                    playNext();
                }
            }
        });

        // Top panel for cover and status
        JPanel topPanel = new JPanel();
        topPanel.setBackground(Color.LIGHT_GRAY);
        topPanel.setLayout(new BorderLayout());
        topPanel.add(coverLabel, BorderLayout.CENTER);

        JPanel statusPanel = new JPanel();
        statusPanel.setBackground(Color.LIGHT_GRAY);
        statusPanel.setLayout(new FlowLayout());
        statusPanel.add(statusLabel);
        topPanel.add(statusPanel, BorderLayout.SOUTH);

        // Bottom panel for controls
        JPanel controlsPanel = new JPanel();
        controlsPanel.setBackground(Color.LIGHT_GRAY);
        controlsPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);

        // Playlist button
        gbc.gridx = 0;
        gbc.gridy = 0;
        controlsPanel.add(playlistButton, gbc);

        // Lyrics button
        gbc.gridx = 2;
        gbc.gridy = 0;
        controlsPanel.add(lyricsButton, gbc);

        // Like button
        gbc.gridx = 0;
        gbc.gridy = 3;
        controlsPanel.add(likeButton, gbc);

        // Dislike button
        gbc.gridx = 2;
        gbc.gridy = 3;
        controlsPanel.add(dislikeButton, gbc);

        // Previous button
        gbc.gridx = 0;
        gbc.gridy = 2;
        controlsPanel.add(prevButton, gbc);

        // Play/Pause button
        gbc.gridx = 1;
        gbc.gridy = 2;
        controlsPanel.add(playPauseButton, gbc);

        // Next button
        gbc.gridx = 2;
        gbc.gridy = 2;
        controlsPanel.add(nextButton, gbc);

        // Shuffle button
        gbc.gridx = 0;
        gbc.gridy = 4;
        controlsPanel.add(shuffleButton, gbc);

        // Shuffle status label
        gbc.gridx = 1;
        gbc.gridy = 4;
        controlsPanel.add(shuffleStatusLabel, gbc);

        // Progress slider
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 3;
        controlsPanel.add(progressSlider, gbc);

        // Volume button
        gbc.gridx = 2;
        gbc.gridy = 4;
        controlsPanel.add(volumeButton, gbc);

        // Volume slider
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridwidth = 3;
        controlsPanel.add(volumeSlider, gbc);

        add(topPanel, BorderLayout.CENTER);
        add(controlsPanel, BorderLayout.SOUTH);

        playlist = new ArrayList<>();
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (audioClip != null && isPlaying) {
                    long currentMicroseconds = audioClip.getMicrosecondPosition();
                    long totalMicroseconds = audioClip.getMicrosecondLength();
                    int progress = (int) ((currentMicroseconds * 100) / totalMicroseconds);
                    isAdjustingProgress = true;
                    progressSlider.setValue(progress);
                    isAdjustingProgress = false;
                    if (audioClip.getFramePosition() == audioClip.getFrameLength()) {
                        playNext();
                    }
                }
            }
        });

        // Add action listeners
        openMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openFile();
            }
        });

        openFolderMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openFolder();
            }
        });

        playPauseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (isPlaying) {
                    pause();
                } else {
                    play();
                }
            }
        });

        nextButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                playNext();
            }
        });

        prevButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                playPrevious();
            }
        });

        shuffleButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                toggleShuffle();
            }
        });

        likeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                toggleLike();
            }
        });

        dislikeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                toggleDislike();
            }
        });

        volumeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                toggleVolumeSlider();
            }
        });

        lyricsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                displayLyrics();
            }
        });

        playlistButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                displayPlaylist();
            }
        });
    }

    private void makeButtonTransparent(JButton button) {
        button.setContentAreaFilled(false);
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.setOpaque(false);
    }

    private void openFile() {
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            playlist.clear();
            playlist.add(selectedFile);
            currentIndex = 0;
            playSelectedFile();
        }
    }

    private void openFolder() {
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File folder = fileChooser.getSelectedFile();
            File[] files = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".wav"));
            if (files != null) {
                playlist.clear();
                Collections.addAll(playlist, files);
                currentIndex = 0;
                playSelectedFile();
            }
        }
    }

    private void playSelectedFile() {
        if (currentIndex >= 0 && currentIndex < playlist.size()) {
            selectedFile = playlist.get(currentIndex);
            resetLikeDislike();
            playAudioFile(selectedFile);
        }
    }

    private void resetLikeDislike() {
        isLiked = false;
        isDisliked = false;
        likeButton.setIcon(resizeIcon(new ImageIcon(likeIconPath), 50, 50));
        dislikeButton.setIcon(resizeIcon(new ImageIcon(dislikeIconPath), 50, 50));
    }

    private void updateAlbumCover(File musicFile) {
        String imagePath = "album_art/" + musicFile.getName().replace(".wav", ".jpg");
        String noimagePath = "image/no_album_art.jpg";
        File imageFile = new File(imagePath);
        if (imageFile.exists()) {
            ImageIcon coverIcon = new ImageIcon(imagePath);
            coverLabel.setIcon(new ImageIcon(coverIcon.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH)));
        } else {
            coverLabel.setIcon(null); // 앨범 커버 이미지가 없는 경우
            ImageIcon coverIcon = new ImageIcon(noimagePath);
            coverLabel.setIcon(new ImageIcon(coverIcon.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH)));
        }
    }

    private void playAudioFile(File file) {
        try {
            if (audioClip != null && audioClip.isOpen()) {
                audioClip.close();
            }
            audioClip = AudioSystem.getClip();
            AudioInputStream audioStream = AudioSystem.getAudioInputStream(file);
            audioClip.open(audioStream);
            volumeControl = (FloatControl) audioClip.getControl(FloatControl.Type.MASTER_GAIN);
            setVolume(volumeSlider.getValue());
            updateAlbumCover(file);
            audioClip.start();
            isPlaying = true;
            isPaused = false;
            playPauseButton.setIcon(resizeIcon(new ImageIcon(pauseIconPath), 50, 50));
            String fileName = file.getName();
            if (fileName.contains(".")) {
                fileName = fileName.substring(0, fileName.lastIndexOf('.'));
            }
            statusLabel.setText("Playing: " + fileName);
            timer.start(); // Timer 시작
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
            ex.printStackTrace();
            statusLabel.setText("Error playing file");
        }
    }

    private void playNext() {
        if (isShuffle) {
            currentIndex = (int) (Math.random() * playlist.size());
        } else {
            currentIndex = (currentIndex + 1) % playlist.size();
        }
        if (currentIndex < playlist.size()) {
            playSelectedFile();
        } else {
            isPlaying = false;
            timer.stop(); // Timer 정지
            playPauseButton.setIcon(resizeIcon(new ImageIcon(playIconPath), 50, 50));
            statusLabel.setText("Playback completed");
        }
    }

    private void play() {
        if (isPaused) {
            audioClip.setMicrosecondPosition(clipTimePosition);
            audioClip.start();
            isPlaying = true;
            isPaused = false;
            playPauseButton.setIcon(resizeIcon(new ImageIcon(pauseIconPath), 50, 50));
            statusLabel.setText("Playing: " + selectedFile.getName());
        } else if (selectedFile != null) {
            playAudioFile(selectedFile);
        }
    }

    private void pause() {
        clipTimePosition = audioClip.getMicrosecondPosition();
        audioClip.stop();
        isPlaying = false;
        isPaused = true;
        playPauseButton.setIcon(resizeIcon(new ImageIcon(playIconPath), 50, 50));
        statusLabel.setText("Paused: " + selectedFile.getName());
    }

    private void playPrevious() {
        if (isShuffle) {
            currentIndex = (int) (Math.random() * playlist.size());
        } else {
            currentIndex = (currentIndex - 1 + playlist.size()) % playlist.size();
        }
        playSelectedFile();
    }

    private void toggleShuffle() {
        isShuffle = !isShuffle;
        shuffleStatusLabel.setText("Shuffle: " + (isShuffle ? "On" : "Off"));
    }

    private void toggleLike() {
        if (isLiked) {
            isLiked = false; // 이미 'Liked' 상태라면 'Like'로 변경
            likeButton.setIcon(resizeIcon(new ImageIcon(likeIconPath), 50, 50));
        } else {
            isLiked = true;
            isDisliked = false; // Like 상태 활성화 시 Dislike 비활성화
            likeButton.setIcon(resizeIcon(new ImageIcon(likePressedIconPath), 50, 50));
            dislikeButton.setIcon(resizeIcon(new ImageIcon(dislikeIconPath), 50, 50));
        }
    }

    private void toggleDislike() {
        if (isDisliked) {
            isDisliked = false; // 이미 'Disliked' 상태라면 'Dislike'로 변경
            dislikeButton.setIcon(resizeIcon(new ImageIcon(dislikeIconPath), 50, 50));
        } else {
            isDisliked = true;
            isLiked = false; // Dislike 상태 활성화 시 Like 비활성화
            dislikeButton.setIcon(resizeIcon(new ImageIcon(dislikePressedIconPath), 50, 50));
            likeButton.setIcon(resizeIcon(new ImageIcon(likeIconPath), 50, 50));
        }
    }

    private void toggleVolumeSlider() {
        volumeSlider.setVisible(!volumeSlider.isVisible());
    }

    private void setVolume(int volume) {
        if (volumeControl != null) {
            float volumeLevel = volume / 100.0f;
            volumeControl.setValue(volumeControl.getMinimum() + (volumeControl.getMaximum() - volumeControl.getMinimum()) * volumeLevel);
        }
    }

    private void displayLyrics() {
        if (selectedFile != null) {
            String lyricsPath = "lyrics/" + selectedFile.getName().replace(".wav", ".txt");
            File lyricsFile = new File(lyricsPath);
            if (lyricsFile.exists()) {
                try {
                    String lyrics = new String(Files.readAllBytes(Paths.get(lyricsFile.getAbsolutePath())), "UTF-8");
                    JTextArea textArea = new JTextArea(lyrics);
                    textArea.setWrapStyleWord(true);
                    textArea.setLineWrap(true);
                    textArea.setEditable(false);
                    textArea.setCaretPosition(0);

                    JScrollPane scrollPane = new JScrollPane(textArea);
                    scrollPane.setPreferredSize(new Dimension(350, 200));
                    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

                    JDialog dialog = new JDialog();
                    String fileName = selectedFile.getName();
                    if (fileName.contains(".")) {
                        fileName = fileName.substring(0, fileName.lastIndexOf('.'));
                    }
                    dialog.setTitle("Lyrics - " + fileName);
                    dialog.getContentPane().add(scrollPane);
                    dialog.pack();
                    dialog.setLocationRelativeTo(null);
                    dialog.setVisible(true);
                } catch (IOException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error reading lyrics file", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Lyrics not found", "Lyrics", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    private void displayPlaylist() {
        StringBuilder playlistContent = new StringBuilder();
        for (int i = 0; i < playlist.size(); i++) {
            playlistContent.append((i + 1)).append(". ").append(playlist.get(i).getName()).append("\n");
        }
        JOptionPane.showMessageDialog(this, playlistContent.toString(), "Playlist", JOptionPane.INFORMATION_MESSAGE);
    }

    private ImageIcon resizeIcon(ImageIcon icon, int width, int height) {
        Image image = icon.getImage();
        Image resizedImage = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        return new ImageIcon(resizedImage);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MusicPlayer().setVisible(true);
            }
        });
    }
}
